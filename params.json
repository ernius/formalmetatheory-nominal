{"name":"Formalmetatheory-nominal","tagline":"","body":"### Lambda Calculus Formalisation\r\n\r\nWe present both a alpha-structural recursion and induction principles over lambda calculus terms. These principles deals with the issues of bound names and alpha equivalence classes in the formalisation of the meta-theory of lambda calculus. Our recursion principle grants that the function's result does not depend on which lambda term of an alpha equivalence class is the function applied to. We present an induction principle that allows us to choose bound variables in the style of Barendregt's variable convention~\\cite{bar84:lambda}, and has strong enough inductive hypothesis case to prove without any disruption properties of functions defined with the given recursive principle. This principles simplifies reasoning considerably, enabling our formalisation to mimic pen-and-paper informal proofs. We prove two classic results of lambda calculus meta-theory giving some basic proof sketch mechanism over this principles that verifies our affirmations. We have also verified all the exposed results in the Agda proof assistant.\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here using GitHub Flavored Markdown, select a template crafted by a designer, and publish. After your page is generated, you can check out the new branch:\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}